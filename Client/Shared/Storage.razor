@inject IJSRuntime JsRuntime
@inject RootStore Store

@if (hasLoaded)
{
    @ChildContent
}
else
{
    <p>Loading...</p>
}

@code {
    private bool hasLoaded;
    private bool isDeserializing;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string vm;
        vm = await JsRuntime.InvokeAsync<string>("state.load", nameof(Store));

        if (!string.IsNullOrEmpty(vm))
        {
            try
            {
                var viewModel = JsonSerializer.Deserialize<RootStore>(vm);
                if (viewModel != null)
                {
                    isDeserializing = true;
                    Store.CurrentUser = viewModel.CurrentUser;
                    @*Store.Activities = viewModel.Activities;
                        Store.SelectedActivity = viewModel.SelectedActivity;*@
                    isDeserializing = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        Store.PropertyChanged += async (o, e) =>
        {
            if (isDeserializing)
            {
                return;
            }
            var vmStr = JsonSerializer.Serialize(((RootStore)Store));
            await JsRuntime.InvokeAsync<object>(
                "state.save", nameof(Store), vmStr);
        };

        hasLoaded = true;
    }
}