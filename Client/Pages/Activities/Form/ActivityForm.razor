@page "/createActivity"
@page "/manage/{Id}"

@inject NavigationManager NavManager
@inject Agent Agent

@if (loadingPage)
{
    <div class="ui segment">
        <p></p>
        <div class="ui active inverted dimmer">
            <div class="ui loader"></div>
        </div>
    </div>
}
else
{
    if (Activity != null)
    {
        <div class="ui grid">
            <div class="ten wide column">
                <div class="ui clearing segment">
                    <EditForm class="ui form"
                              Model="Activity"
                              @*OnValidSubmit="HandleSubmit" *@>
                        <DataAnnotationsValidator />
                        <div class="field">
                            <div class="ui input">
                                <InputText id="title"
                                           placeholder="Title"
                                           @bind-Value="Activity.Title" />
                            </div>
                            <ValidationMessage For="() => Activity.Title" />
                        </div>
                        <div class="field">
                            <div class="ui input">
                                <InputTextArea id="description"
                                               rows="2"
                                               placeholder="Description"
                                               @bind-Value="Activity.Description" />
                            </div>
                            <ValidationMessage For="() => Activity.Description" />
                        </div>
                        <div class="field">
                            <div class="ui input">
                                <InputSelect id="category"
                                             placeholder="Category"
                                             @bind-Value="Activity.Category">
                                    <option value="">Select a category...</option>
                                    @foreach (var category in Activity.Categories)
                                            {
                                        <option value="@category.ToLower()">@category</option>
                                            }
                                    /**/
                                </InputSelect>
                            </div>
                            <ValidationMessage For="() => Activity.Category" />
                        </div>
                        <div class="two fields">
                            <div class="field">
                                <input @bind="Activity.Date"
                                       @bind:format="yyyy-MM-dd"
                                       type="date" />
                            </div>
                            <div class="field">
                                <input @bind="Activity.Time"
                                       @bind:format="HH:mm:ss"
                                       type="time" />
                            </div>
                            <ValidationMessage For="() => Activity.Date" />
                        </div>
                        <div class="field">
                            <div class="ui input">
                                <InputText id="city"
                                           placeholder="City"
                                           @bind-Value="Activity.City" />
                            </div>
                            <ValidationMessage For="() => Activity.City" />
                        </div>
                        <div class="field">
                            <div class="ui input">
                                <InputText id="venue"
                                           placeholder="Venue"
                                           @bind-Value="Activity.Venue" />
                            </div>
                            <ValidationMessage For="() => Activity.Venue" />
                        </div>
                        <button type="submit"
                                class="ui positive right floated button
                                       @(loadingButton ? " loading" : "" )">
                            Submit
                        </button>
                        <button type="button"
                                class="ui right floated button"
                                @onclick="@(async () =>
                                NavManager.NavigateTo($" /activities/{Activity.Id}"))">
                            Cancel
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }

}

@code {
    [Parameter]
    public string Id { get; set; }

    Activity Activity;

    bool loadingPage;
    bool loadingButton;

    protected override async Task OnInitializedAsync()
    {
        @*if (ActivityState.Value.SelectedActivity != null)
            {
                Activity = ActivityState.Value.SelectedActivity;
                Activity.Time = Convert.ToDateTime(Activity.Date.ToString("hh:mm"));
            }
            else if (Id != null)
            {*@
        loadingPage = true;

        Activity = await Agent.GetActivity(Id);
        Activity.Time = Convert.ToDateTime(Activity.Date.ToString("hh:mm"));

        loadingPage = false;
        @*}*@
    }

    protected override void OnParametersSet()
    {
        if (NavManager.ToBaseRelativePath(NavManager.Uri).StartsWith("create"))
            Activity = new Activity();
    }

    @*async Task HandleSubmit()
        {
            loadingButton = true;

            bool isNew;
            HttpResponseMessage response;
            var activities = ActivityState.Value.Activities;

            Activity.Date = Util.CombineDateAndTime(Activity.Date, Activity.Time);

            if (NavManager.ToBaseRelativePath(NavManager.Uri).StartsWith("create"))
            {
                Activity.Id = new Guid().ToString();
                response = await Agent.CreateActivity(Activity);
                isNew = true;
            }
            else
            {
                response = await Agent.UpdateActivity(Activity);
                isNew = false;
            }

            if (response.IsSuccessStatusCode)
            {
                if (isNew == false)
                {
                    var activity = activities.Where(a => a.Id == Activity.Id).FirstOrDefault();
                    activities.Remove(activity);
                }

                activities.Add(Activity);
                Dispatcher.Dispatch(new SetAllActivitiesAction
                {
                    Activities = activities.OrderByDescending(a => a.Date).ToList()
                });

                loadingButton = false;
                NavManager.NavigateTo($"/activities");
                // PROBLEM: in this way we are retreaving again every activity for each new one created
                // TODO: get the new activity back from the API and redirect to its details page
            }
        }*@
}