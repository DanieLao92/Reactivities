@inject Agent Agent
@inject NavigationManager NavManager

<div class="ui segments">
    <div class="ui segment">
        <div class="ui items">
            <div class="item">
                <img src="assets/user.png"
                     class="item image circular"
                     style="width: 50px; height: 50px;" />
                <div class="content">
                    <a class="header">@Activity.Title</a>
                    <div class="description">
                        Hosted by Bob
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="ui segment">
        <i class="icon clock"></i> @Activity.Date.ToString("hh:mm tt")
        <i class="icon marker"></i> @Activity.Venue, @Activity.City
    </div>
    <div class="ui segment secondary">
        Attendees will go here
    </div>
    <div class="ui segment clearing">
        <span>@Activity.Description</span>
        @*<button class="ui button blue right floated"
                    @onclick="() => SelectActivity(Activity)">
                View
            </button>*@
    </div>
</div>

@code {
    [Parameter]
    public Activity Activity { get; set; } = new Activity();

    @*void SelectActivity(Activity selectedActivity)
        {
            Dispatcher.Dispatch(new SelectActivityAction
            {
                SelectedActivity = selectedActivity
            });
            NavManager.NavigateTo($"/activities/{selectedActivity.Id}");
        }*@

    //async Task DeleteActivity(Activity selectedActivity)
    //{
    //    await js.InvokeVoidAsync("toggleClass", $"button-{selectedActivity.Id}", "loading");

    //    var deleteResponse = await Agent.DeleteActivity(selectedActivity.Id);
    //    await js.InvokeVoidAsync("log", deleteResponse);

    //    if (deleteResponse.IsSuccessStatusCode)
    //    {
    //        await js.InvokeVoidAsync("toggleClass", $"button-{selectedActivity.Id}", "loading");

    //        var activities = ActivityState.Value.Activities;
    //        Dispatcher.Dispatch(new SetAllActivitiesAction
    //        {
    //            Activities = activities.Where(a => a.Id != selectedActivity.Id).ToList()
    //        });
    //    }
    //}
}