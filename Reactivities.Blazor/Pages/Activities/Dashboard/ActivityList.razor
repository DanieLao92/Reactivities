@inherits FluxorComponent

@inject Agent Agent
@inject IDispatcher Dispatcher
@inject IState<ActivityState> ActivityState
@inject IJSRuntime js
@inject NavigationManager NavManager

<div class="ui divided items">
    @if (activities == null)
    {
        <div class="ui segment">
            <p></p>
            <div class="ui active inverted dimmer">
                <div class="ui loader"></div>
            </div>
        </div>
    }
    else
    {
        @foreach (var group in ActivityState.Value.ActivitiesByDate)
        {
            <label class="ui blue ribbon large label">@group.Date</label>
            @foreach (var activity in group.Activities)
            {
                <ActivityListItem Activity="activity" />
            }
        }
    }
</div>

@code {
    List<Activity> activities;
    List<ActivityGroupByDate> orderedActivities;

    protected override async Task OnInitializedAsync()
    {

        var response = await Agent.ListActivities();
        if (response != null)
        {
            Dispatcher.Dispatch(new SetAllActivitiesAction
            {
                Activities = response.OrderByDescending(a => a.Date).ToList()
            });
        }
        // PROBLEM: we are doing too many requests to the API
        // but for now is necessary because new activities don't have a valid guid until new fetch

        activities = ActivityState.Value.Activities;
        orderedActivities = ActivityState.Value.ActivitiesByDate;
    }
}