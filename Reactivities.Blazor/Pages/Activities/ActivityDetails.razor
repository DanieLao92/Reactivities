@page "/activities/{Id}"

@inherits FluxorComponent

@inject IState<ActivityState> ActivityState
@inject NavigationManager NavManager
@inject IDispatcher Dispatcher
@inject Agent Agent

@if (loading)
{
    <div class="ui segment">
        <p></p>
        <div class="ui active inverted dimmer">
            <div class="ui loader"></div>
        </div>
    </div>
}
else
{
    if (SelectedActivity != null)
    {
        <div class="ui card fluid">
            <div class="image">
                <img src="/assets/categoryImages/@(SelectedActivity.Category).jpg" />
            </div>
            <div class="content">
                <div class="header">@SelectedActivity.Title</div>
                <div class="meta">@SelectedActivity.Date</div>
                <div class="description">@SelectedActivity.Description</div>
            </div>
            <div class="extra content">
                <div class="ui two buttons">
                    <button class="ui blue basic button"
                            @onclick="@(() => NavManager.NavigateTo("createActivity"))">
                        Edit
                    </button>
                    <button class="ui grey basic button"
                            @onclick="@(async () => NavManager.NavigateTo("/activities"))">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Sorry, page not found.</p>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }

    Activity SelectedActivity;
    bool loading;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        if (ActivityState.Value.SelectedActivity == null)
        {
            var activity = await Agent.GetActivity(Id);
            if (activity != null)
                SelectedActivity = activity;
        }
        else
            SelectedActivity = ActivityState.Value.SelectedActivity;

        loading = false;
    }
}