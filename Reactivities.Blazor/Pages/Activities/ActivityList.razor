@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject Agent Agent
@inject IDispatcher Dispatcher
@inject IState<ActivityState> ActivityState
@inject IJSRuntime js

<div class="ui clearing segment">
    <div class="ui divided items">
        @if (activities == null)
        {
            <div class="ui segment">
                <p></p>
                <div class="ui active inverted dimmer">
                    <div class="ui loader"></div>
                </div>
            </div>
        }
        else
        {
            @foreach (var activity in ActivityState.Value.Activities)
            {
                <div class="item">
                    <div class="content">
                        <a class="header">@activity.Title</a>
                        <div class="meta">@activity.Date</div>
                        <div class="description">
                            <div>@activity.Description</div>
                            <div>@activity.City, @activity.Venue</div>
                        </div>
                        <div class="extra">
                            <button class="ui button blue right floated"
                                    @onclick="() => SelectActivity(activity)">
                                View
                            </button>
                            <button id="button-@activity.Id"
                                    class="ui button red right floated"
                                    @onclick="() => DeleteActivity(activity)">
                                Delete
                            </button>
                            <label class="ui basic label">@activity.Category</label>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    List<Activity> activities;

    protected override async Task OnInitializedAsync()
    {
        activities = await Agent.ListActivities();
        if (activities != null)
        {
            Dispatcher.Dispatch(new SetAllActivitiesAction
            {
                Activities = activities.OrderByDescending(a => a.Date).ToList()
            });
        }
    }

    void SelectActivity(Activity selectedActivity)
    {
        Dispatcher.Dispatch(new SetEditModeAction(false));

        Dispatcher.Dispatch(new SelectActivityAction
        {
            SelectedActivity = selectedActivity
        });
    }

    async Task DeleteActivity(Activity selectedActivity)
    {
        await js.InvokeVoidAsync("toggleClass", $"button-{selectedActivity.Id}", "loading");

        var deleteResponse = await Agent.DeleteActivity(selectedActivity.Id);
        await js.InvokeVoidAsync("log", deleteResponse);

        if (deleteResponse.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("toggleClass", $"button-{selectedActivity.Id}", "loading");

            var activities = ActivityState.Value.Activities;
            Dispatcher.Dispatch(new SetAllActivitiesAction
            {
                Activities = activities.Where(a => a.Id != selectedActivity.Id).ToList()
            });
        }
    }
}