@using Data
@using Store
@using Store.Activities
@using Fluxor

@inject ActivitiesService ActivitiesService
@inject IDispatcher Dispatcher
@inject IState<ActivityState> ActivityState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="ui clearing segment">
    <div class="ui divided items">
        @if (ActivityState.Value.Activities == null)
        {
            <p>Loading...</p>
        }
        else
        {
            @foreach (var activity in ActivityState.Value.Activities)
            {
                <div class="item">
                    <div class="content">
                        <a class="header">@activity.Title</a>
                        <div class="meta">@activity.Date</div>
                        <div class="description">
                            <div>@activity.Description</div>
                            <div>@activity.City, @activity.Venue</div>
                        </div>
                        <div class="extra">
                            <button class="ui button blue right floated"
                                    @onclick="() => SelectActivity(activity)">
                                View
                            </button>
                            <button class="ui button red right floated"
                                    @onclick="() => DeleteActivity(activity)">
                                Delete
                            </button>
                            <label class="ui basic label">@activity.Category</label>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        var activities = await ActivitiesService.GetActivities();
        Dispatcher.Dispatch(new SetAllActivitiesAction
        {
            Activities = activities.OrderByDescending(a => a.Date).ToList()
        });
    }

    void SelectActivity(Activity selectedActivity)
    {
        Dispatcher.Dispatch(new SetEditModeAction(false));

        Dispatcher.Dispatch(new SelectActivityAction
        {
            SelectedActivity = selectedActivity
        });
    }

    void DeleteActivity(Activity selectedActivity)
    {
        var activities = ActivityState.Value.Activities;
        Dispatcher.Dispatch(new SetAllActivitiesAction
        {
            Activities = activities.Where(a => a.Id != selectedActivity.Id).ToList()
        });
    }
}