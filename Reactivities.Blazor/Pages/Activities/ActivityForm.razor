@page "/createActivity"
@page "/manage/{Id}"

@inherits FluxorComponent

@inject IState<ActivityState> ActivityState
@inject NavigationManager NavManager
@inject IDispatcher Dispatcher
@inject Agent Agent
@inject IJSRuntime js

@if (loadingPage)
{
    <div class="ui segment">
        <p></p>
        <div class="ui active inverted dimmer">
            <div class="ui loader"></div>
        </div>
    </div>
}
else
{
    <div class="ui clearing segment">
        <form class="ui form"
              @onsubmit="HandleSubmit">
            <div class="field">
                <div class="ui input">
                    <input type="text"
                           placeholder="Title"
                           @bind="Activity.Title" />
                </div>
            </div>
            <div class="field">
                <div class="ui input">
                    <textarea rows="2"
                              placeholder="Description"
                              @bind="Activity.Description" />
                </div>
            </div>
            <div class="field">
                <div class="ui input">
                    <input type="text"
                           placeholder="Category"
                           @bind="Activity.Category" />
                </div>
            </div>
            <div class="field">
                <div class="ui input">
                    <input type="date"
                           placeholder="Date"
                           @bind="Activity.Date" />
                </div>
            </div>
            <div class="field">
                <div class="ui input">
                    <input type="text"
                           placeholder="City"
                           @bind="Activity.City" />
                </div>
            </div>
            <div class="field">
                <div class="ui input">
                    <input type="text"
                           placeholder="Venue"
                           @bind="Activity.Venue" />
                </div>
            </div>
            <button type="submit"
                    class="ui positive right floated button
                    @(loadingButton ? " loading" : "" )">
                Submit
            </button>
            <button type="button"
                    class="ui right floated button"
                    @onclick="@(async () =>
                                NavManager.NavigateTo($" /activities/{Activity.Id}"))">
                Cancel
            </button>
        </form>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    bool loadingPage;
    bool loadingButton;
    Activity Activity = new Activity();

    protected override async Task OnInitializedAsync()
    {
        if (ActivityState.Value.SelectedActivity != null)
            Activity = ActivityState.Value.SelectedActivity;
        else if (Id != null)
        {
            loadingPage = true;
            Activity = await Agent.GetActivity(Id);
            loadingPage = false;
        }
    }

    protected override void OnParametersSet()
    {
        if (NavManager.ToBaseRelativePath(NavManager.Uri).StartsWith("create"))
            Activity = new Activity();
    }

    async Task HandleSubmit()
    {
        loadingButton = true;

        bool isNew;
        HttpResponseMessage response;
        var activities = ActivityState.Value.Activities;

        if (NavManager.ToBaseRelativePath(NavManager.Uri).StartsWith("create"))
        {
            Activity.Id = new Guid().ToString();
            response = await Agent.CreateActivity(Activity);
            isNew = true;
        }
        else
        {
            response = await Agent.UpdateActivity(Activity);
            isNew = false;
        }

        await js.InvokeVoidAsync("log", response);

        if (response.IsSuccessStatusCode)
        {
            if (isNew == false)
            {
                var activity = activities.Where(a => a.Id == Activity.Id).FirstOrDefault();
                activities.Remove(activity);
            }

            activities.Add(Activity);
            Dispatcher.Dispatch(new SetAllActivitiesAction
            {
                Activities = activities.OrderByDescending(a => a.Date).ToList()
            });

            loadingButton = false;
            NavManager.NavigateTo($"/activities");
            // PROBLEM: in this way we are retreaving again every activity for each new one created
            // TODO: get the new activity back from the API and redirect to its details page
        }
    }
}